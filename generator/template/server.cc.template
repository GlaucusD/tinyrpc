/*************************************************************
 * 
 *  #####   ###   #     #    #		 #     #####    #####     ####
 *    #			 #    #	#	  #			#		#			 #  #	  	#		#		 #
 *    #			 #    #		# #				#				 ###			#####    #		
 *    #			###   #		  #				#				 #   #		#					####
 *
 * ${FILE_NAME}
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Create Time: ${CREATE_TIME}
 * This file will be overwrite every time
*************************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include "tinyrpc/comm/log.h"
${INCLUDE_PB_HEADER}
${INCLUDE_SERVER_HEADER}
${INCLUDE_BUSINESS_EXCEPTION_HEADER}
${INCLUDE_SERVICE}

#define CALL_RPC_INTERFACE(type)                                                                                                    \
  type impl(*request, *response);                                                                                                   \
  try {                                                                                                                             \
    AppInfoLog << "In|request:{" << request->ShortDebugString() << "}";                                                                \
    impl.run();                                                                                                                     \
    response->set_ret_code(0);                                                                                                      \
    response->set_res_info("OK");                                                                                                   \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                              \
  } catch (${PROJECT_NAME}::BusinessException& e) {                                                                                 \
    AppErrorLog << "[" << e.file_name() << ":" << e.line() << "] occur BusinessException, error code = "                            \
      << e.code() << ", errinfo = " << e.error();                                                                                   \
    response->set_ret_code(e.code());                                                                                               \
    response->set_res_info(e.error());                                                                                              \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                              \
  } catch (std::exception&) {                                                                                                       \
    AppErrorLog << "occur std::exception, error code = -1, errorinfo = UnKnown error ";                                             \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                              \
  } catch (...) {                                                                                                                   \
    AppErrorLog << "occur UnKnown exception, error code = -1, errorinfo = UnKnown error ";                                          \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    AppInfoLog << "Out|response:{" << response->ShortDebugString() << "}";                                                              \
  }                                                                                                                                 \
  if (done) {                                                                                                                       \
    done->Run();                                                                                                                    \
  }                                                                                                                                 \

namespace ${PROJECT_NAME} {

${METHOD}

}